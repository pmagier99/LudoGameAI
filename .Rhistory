data(trees)
names(trees) <- c("DBH_in","height_ft", "volume_ft3")
head(trees)
View(trees)
plot(DBH_in ~ height_ft, data = trees, pch=16, cex=1.5)
set.seed(123)
a_coef <- runif(min=-100, max = 100, n=100)
b_coef <- runif(min=-100, max = 100, n=100)
population <- data.frame(a_coef, b_coef, fitness=NA)
View(population)
View(trees)
gen_starting_pop<-function(){
a_coef <- runif(min=-100, max = 100, n=100)
b_coef <- runif(min=-100, max = 100, n=100)
population <- data.frame(a_coef, b_coef, fitness=NA)
return(population)
}
gen_starting_pop<-function(){
a_coef <- runif(min=-100, max = 100, n=100)
b_coef <- runif(min=-100, max = 100, n=100)
population <- data.frame(a_coef, b_coef, fitness=NA)
return(population)
}
evaluate_fitess <- function(population){
for(i in 1:100){
DBH_predicted = population[i,"a_coef"] + population[i,"b_coef"]*threes$height_ft
difference <- DBH_predicted - trees$DBH_in
sum_sq_diff <- sum(difference^2)
fitness <- 1/sum_sq_diff
population$fitness[i] <-fitness
}
top_10_fit <- order(population$fitness, decreasing = T)[1:10]
survivors<-population[top_10_fit,]
return(survivors)
}
population<-evaluate_fitess(population)
evaluate_fitess <- function(population){
for(i in 1:100){
DBH_predicted = population[i,"a_coef"] + population[i,"b_coef"]*trees$height_ft
difference <- DBH_predicted - trees$DBH_in
sum_sq_diff <- sum(difference^2)
fitness <- 1/sum_sq_diff
population$fitness[i] <-fitness
}
top_10_fit <- order(population$fitness, decreasing = T)[1:10]
survivors<-population[top_10_fit,]
return(survivors)
}
population<-evaluate_fitess(population)
View(population)
parents<-sample(1:10, size=100, replace=T)
offspring<-evaluate_fitess[parents,]
offspring<-survivors[parents,]
offspring<-population[parents,]
View(offspring)
mutation_rate<- 0.6
total_mutations<-round(100*mutation_rate)
a_to_mutate <- sample(x=c(1:100), size=total_mutations)
b_to_mutate <- sample(x=c(1:100), size=total_mutations)
a_mutations <- rnorm(n = total_mutations, mean=0, sd=3)
b_mutations <- rnorm(n = total_mutations, mean=0, sd=3)
offspring$a_coef[a_to_mutate] <- offspring$a_coef[a_to_mutate] + a_mutations
offspring$b_coef[b_to_mutate] <- offspring$b_coef[b_to_mutate] + b_mutations
row.names(offspring) <- 1:100
devtools::install_github("nproellochs/ReinforcementLearning")
install.packages("devtools")
devtools::install_github("nproellochs/ReinforcementLearning")
library(ReinforcementLearning)
tictactoe<-data("tictactoe")
source("~/.active-rstudio-document", echo=TRUE)
View(tictactoe)
states <- c("s1", "s2", "s3", "s4")
actions <- c("up", "down", "left", "right")
env <- gridworldEnvironment
# Sample N = 1000 random sequences from the environment
data <- sampleExperience(N = 1000,
env = env,
states = states,
actions = actions)
View(data)
control <- list(alpha = 0.2, gamma = 0.4, epsilon = 0.1)
# Perform reinforcement learning
model <- ReinforcementLearning(tictactoe, s = "State", a = "Action", r = "Reward",
s_new = "NextState", iter = 1, control = control)
pol <- computePolicy(model)
head(pol)
View(model)
head(pol, 10)
head(pol, 10)
plot(pol)
plot(Action ~ Reward, data = tictactoe, pch=16, cex=1.5)
ind<-sample(2,nrow(tictactoe), replace=T,prob=c(.7,.3))
test<-data[ind==2, 4]
test<-data[ind==2, 1:4]
View(test)
test<-tictactoe[ind==2, 1:4]
# Perform reinforcement learning
model <- ReinforcementLearning(tictactoe, s = "State", a = "Action", r = "Reward",
s_new = "NextState", iter = 1, control = control, verbose=T)
pol <- computePolicy(model)
head(pol, 10)
View(tictactoe)
data("BostonHousing")
devtools::install_github("nproellochs/ReinforcementLearning")
library(keras)
library(mlbench)
library(dplyr)
library(magrittr)
library(neuralnet)
data("BostonHousing")
up=matrix(c( 1, 0, 0, 0,
0.7, 0.2, 0.1, 0,
0, 0.1, 0.2, 0.7,
0, 0, 0, 1),
nrow=4,ncol=4,byrow=TRUE)
View(up)
#Up Action
up=matrix(c( 1, 0, 0, 0,
0.7, 0.2, 0.1, 0,
0, 0.1, 0.2, 0.7,
0, 0, 0, 1),
nrow=4,ncol=4,byrow=TRUE)
#Down Action
down=matrix(c(0.3, 0.7, 0, 0,
0, 0.9, 0.1, 0,
0, 0.1, 0.9, 0,
0, 0, 0.7, 0.3),
nrow=4,ncol=4,byrow=TRUE)
#Left Action
left=matrix(c( 0.9, 0.1, 0, 0,
0.1, 0.9, 0, 0,
0, 0.7, 0.2, 0.1,
0, 0, 0.1, 0.9),
nrow=4,ncol=4,byrow=TRUE)
#Right Action
right=matrix(c( 0.9, 0.1, 0, 0,
0.1, 0.2, 0.7, 0,
0, 0, 0.9, 0.1,
0, 0, 0.1, 0.9),
nrow=4,ncol=4,byrow=TRUE)
#Combined Actions matrix
Actions=list(up=up, down=down, left=left, right=right)
View(Actions)
View(Actions)
View(down)
View(up)
View(left)
print(gridworldEnvironment)
setwd("~/Desktop/uni/production project/product/AI/pythonProject1")
library(ggplot2)
games100 <- read.csv("stats_100.csv")
games1000 <- read.csv("stats_1000.csv")
games100$total_dec <- games100$good_dec + games100$bad_dec
games1000$total_dec <- games1000$good_dec + games1000$bad_dec
View(games100)
View(games1000)
games100$total_dec <- games100$good_dec + games100$bad_dec
games1000$total_dec <- games1000$good_dec + games1000$bad_dec
y_games100 <- games100[games100$Colour == "Yellow",]
g_games100 <- games100[games100$Colour == "Green",]
r_games100 <- games100[games100$Colour == "Red",]
b_games100 <- games100[games100$Colour == "Blue",]
y_games1000 <- games1000[games1000$Colour == "Yellow",]
g_games1000 <- games1000[games1000$Colour == "Green",]
r_games1000 <- games1000[games1000$Colour == "Red",]
b_games1000 <- games1000[games1000$Colour == "Blue",]
lm(bad_dec ~ number_of_games, data = y_games1000)
lm(bad_dec ~ number_of_game, data = y_games1000)
summary(y)
y = lm(bad_dec ~ number_of_game, data = y_games1000)
summary(y)
summary(y1)
y1 = lm(bad_dec ~ number_of_game, data = y_games100)
summary(y1)
plot(y)
plot(y1)
y1 = lm(good_dec ~ number_of_game, data = y_games100)
y = lm(good_dec ~ number_of_game, data = y_games1000)
summary(y)
summary(y1)
plot(y1)
games100 <- read.csv("stats_100.csv")
y_games100 <- games100[games100$Colour == "Yellow",]
ggplot(y_games100, aes(number_of_game, bad_dec))+geom_line()
ggplot(y_games100, aes(games, bad_dec))+geom_line()
View(y_games100)
y_games100 <- games100[games100$colour == "Yellow",]
ggplot(y_games100, aes(games, bad_dec))+geom_line()
y1 = lm(bad_dec ~ games, data = y_games100)
plot(y1)
